// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package accounts

import (
	context "context"
	applications "github.com/allanger/gitlab-environment-aggregator/models/apps/applications"
	common "github.com/allanger/gitlab-environment-aggregator/models/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountsClient interface {
	/// Use to create a Account
	Create(ctx context.Context, in *AccountCreds, opts ...grpc.CallOption) (*AccountInfo, error)
	/// Use to update a Account
	UpdateUser(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*AccountInfo, error)
	UpdatePassword(ctx context.Context, in *PasswordUpdate, opts ...grpc.CallOption) (*common.EmptyMessage, error)
	/// Account to get a Account by ID
	Get(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*AccountInfo, error)
	/// List Accounts
	List(ctx context.Context, in *AccountName, opts ...grpc.CallOption) (Accounts_ListClient, error)
	/// Add an app to the user app list
	AddAppToUser(ctx context.Context, in *applications.AppId, opts ...grpc.CallOption) (*common.EmptyMessage, error)
}

type accountsClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountsClient(cc grpc.ClientConnInterface) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) Create(ctx context.Context, in *AccountCreds, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, "/users.Accounts/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdateUser(ctx context.Context, in *AccountInfo, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, "/users.Accounts/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) UpdatePassword(ctx context.Context, in *PasswordUpdate, opts ...grpc.CallOption) (*common.EmptyMessage, error) {
	out := new(common.EmptyMessage)
	err := c.cc.Invoke(ctx, "/users.Accounts/UpdatePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) Get(ctx context.Context, in *AccountId, opts ...grpc.CallOption) (*AccountInfo, error) {
	out := new(AccountInfo)
	err := c.cc.Invoke(ctx, "/users.Accounts/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountsClient) List(ctx context.Context, in *AccountName, opts ...grpc.CallOption) (Accounts_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Accounts_ServiceDesc.Streams[0], "/users.Accounts/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &accountsListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Accounts_ListClient interface {
	Recv() (*AccountInfo, error)
	grpc.ClientStream
}

type accountsListClient struct {
	grpc.ClientStream
}

func (x *accountsListClient) Recv() (*AccountInfo, error) {
	m := new(AccountInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *accountsClient) AddAppToUser(ctx context.Context, in *applications.AppId, opts ...grpc.CallOption) (*common.EmptyMessage, error) {
	out := new(common.EmptyMessage)
	err := c.cc.Invoke(ctx, "/users.Accounts/AddAppToUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
// All implementations must embed UnimplementedAccountsServer
// for forward compatibility
type AccountsServer interface {
	/// Use to create a Account
	Create(context.Context, *AccountCreds) (*AccountInfo, error)
	/// Use to update a Account
	UpdateUser(context.Context, *AccountInfo) (*AccountInfo, error)
	UpdatePassword(context.Context, *PasswordUpdate) (*common.EmptyMessage, error)
	/// Account to get a Account by ID
	Get(context.Context, *AccountId) (*AccountInfo, error)
	/// List Accounts
	List(*AccountName, Accounts_ListServer) error
	/// Add an app to the user app list
	AddAppToUser(context.Context, *applications.AppId) (*common.EmptyMessage, error)
	mustEmbedUnimplementedAccountsServer()
}

// UnimplementedAccountsServer must be embedded to have forward compatible implementations.
type UnimplementedAccountsServer struct {
}

func (UnimplementedAccountsServer) Create(context.Context, *AccountCreds) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccountsServer) UpdateUser(context.Context, *AccountInfo) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAccountsServer) UpdatePassword(context.Context, *PasswordUpdate) (*common.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePassword not implemented")
}
func (UnimplementedAccountsServer) Get(context.Context, *AccountId) (*AccountInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAccountsServer) List(*AccountName, Accounts_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccountsServer) AddAppToUser(context.Context, *applications.AppId) (*common.EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAppToUser not implemented")
}
func (UnimplementedAccountsServer) mustEmbedUnimplementedAccountsServer() {}

// UnsafeAccountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountsServer will
// result in compilation errors.
type UnsafeAccountsServer interface {
	mustEmbedUnimplementedAccountsServer()
}

func RegisterAccountsServer(s grpc.ServiceRegistrar, srv AccountsServer) {
	s.RegisterService(&Accounts_ServiceDesc, srv)
}

func _Accounts_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCreds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Accounts/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Create(ctx, req.(*AccountCreds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Accounts/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdateUser(ctx, req.(*AccountInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Accounts/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).UpdatePassword(ctx, req.(*PasswordUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Accounts/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Get(ctx, req.(*AccountId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Accounts_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AccountName)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AccountsServer).List(m, &accountsListServer{stream})
}

type Accounts_ListServer interface {
	Send(*AccountInfo) error
	grpc.ServerStream
}

type accountsListServer struct {
	grpc.ServerStream
}

func (x *accountsListServer) Send(m *AccountInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Accounts_AddAppToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(applications.AppId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).AddAppToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/users.Accounts/AddAppToUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).AddAppToUser(ctx, req.(*applications.AppId))
	}
	return interceptor(ctx, in, info, handler)
}

// Accounts_ServiceDesc is the grpc.ServiceDesc for Accounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Accounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "users.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Accounts_Create_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _Accounts_UpdateUser_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _Accounts_UpdatePassword_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Accounts_Get_Handler,
		},
		{
			MethodName: "AddAppToUser",
			Handler:    _Accounts_AddAppToUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Accounts_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "users/accounts/accounts.v1.proto",
}
